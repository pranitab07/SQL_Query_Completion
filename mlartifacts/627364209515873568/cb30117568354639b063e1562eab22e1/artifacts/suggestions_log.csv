"timestamp","model","status","user_input","retrieved_context","llm_suggestion","latency_ms"
"2025-04-23 19:36:03","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","/*\nFetch those data of employees \nwhose salary is greater than 15,000 and \nthey live in Pune but have DOB in January\n*/","Prompt: Find the names and positions of employees who earn more than the average salary?\n            SQL: SELECT name, position FROM employee_salaries WHERE salary > (SELECT avg_salary FROM avg_salary);\n            Explanation: This query first creates a view 'avg_salary' to store the average salary value. Then, it retrieves the names and positions of employees who earn more than the average salary by using a subquery to compare each employee's salary to the average salary stored in the 'avg_salary' view.\n            Similarity Score: 1.0362\n\nPrompt: Add a new row to the 'digital_divide_stats' table with the following data: 'Rural India', 'Limited internet access', '2022-01-01'\n            SQL: INSERT INTO digital_divide_stats (region, issue, last_update) VALUES ('Rural India', 'Limited internet access', '2022-01-01');\n            Explanation: This query inserts a new row into the 'digital_divide_stats' table with the given data.\n            Similarity Score: 1.0479\n\nPrompt: Find the average salary and job title for employees in the ""hr_data"" table\n            SQL: SELECT job_title, AVG(salary) as avg_salary FROM hr_data GROUP BY job_title;\n            Explanation: This query finds the average salary and job title for employees by grouping the data by job_title and calculating the average salary for each group.\n            Similarity Score: 1.0573\n\nPrompt: Get the names and salaries of all employees who earn more than the average salary\n            SQL: SELECT name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);\n            Explanation: This SQL query retrieves the names and salaries of all employees who earn more than the average salary by selecting the name and salary columns for all records where the salary is greater than the average salary.\n            Similarity Score: 1.0575\n\nPrompt: Find the transaction dates and the total transaction amount for transactions made by customers residing in India.\n            SQL: SELECT tx_date, SUM(amount) as total_transaction_amount FROM transactions_4 WHERE country = 'India' GROUP BY tx_date;\n            Explanation: The SQL query filters the transactions_4 table for transactions made by customers residing in India and groups by transaction date. It then calculates the sum of the transaction amount for each transaction date, returning the transaction dates and total transaction amount for transactions made by customers residing in India.\n            Similarity Score: 1.0591","SELECT * \nFROM employees \nWHERE salary > 15000 \nAND city = 'Pune' \nAND MONTH(date_of_birth) = 1;","5.904668092727661"
"2025-04-23 19:37:37","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","/*\nFetch those data of employees \nwhose salary is greater than 15,000 and \nthey live in Pune but have DOB in January\n*/","Prompt: Find the names and positions of employees who earn more than the average salary?\n            SQL: SELECT name, position FROM employee_salaries WHERE salary > (SELECT avg_salary FROM avg_salary);\n            Explanation: This query first creates a view 'avg_salary' to store the average salary value. Then, it retrieves the names and positions of employees who earn more than the average salary by using a subquery to compare each employee's salary to the average salary stored in the 'avg_salary' view.\n            Similarity Score: 1.0362\n\nPrompt: Add a new row to the 'digital_divide_stats' table with the following data: 'Rural India', 'Limited internet access', '2022-01-01'\n            SQL: INSERT INTO digital_divide_stats (region, issue, last_update) VALUES ('Rural India', 'Limited internet access', '2022-01-01');\n            Explanation: This query inserts a new row into the 'digital_divide_stats' table with the given data.\n            Similarity Score: 1.0479\n\nPrompt: What is the total data usage for each customer in January 2022?\n            SQL: SELECT customer_id, SUM(usage_amount) as total_data_usage FROM data_usage WHERE MONTH(usage_date) = 1 AND YEAR(usage_date) = 2022 GROUP BY customer_id;\n            Explanation: This SQL query calculates the total data usage for each customer in January 2022 by grouping the data_usage table by the customer_id column and then summing the usage_amount column for each group, while also filtering based on the usage_date column.\n            Similarity Score: 1.0557\n\nPrompt: Find the average salary and job title for employees in the ""hr_data"" table\n            SQL: SELECT job_title, AVG(salary) as avg_salary FROM hr_data GROUP BY job_title;\n            Explanation: This query finds the average salary and job title for employees by grouping the data by job_title and calculating the average salary for each group.\n            Similarity Score: 1.0573\n\nPrompt: Get the names and salaries of all employees who earn more than the average salary\n            SQL: SELECT name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);\n            Explanation: This SQL query retrieves the names and salaries of all employees who earn more than the average salary by selecting the name and salary columns for all records where the salary is greater than the average salary.\n            Similarity Score: 1.0575","SELECT * FROM employees \nWHERE salary > 15000 \nAND city = 'Pune' \nAND MONTH(date_of_birth) = 1;","7.973211288452148"
"2025-04-23 20:18:40","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","/* suggestion: SELECT marks FROM student_records; */","Prompt: Show all records from 'Students' table\n            SQL: SELECT * FROM Students;\n            Explanation: This retrieves all records from the 'Students' table\n            Similarity Score: 0.6396\n\nPrompt: Delete all records from the students table\n            SQL: DELETE FROM students;\n            Explanation: This query deletes all records from the students table. Without a WHERE clause, the DELETE statement removes all rows.\n            Similarity Score: 0.7713\n\nPrompt: Delete a student record from the 'Students' table\n            SQL: DELETE FROM Students WHERE StudentID = 1234;\n            Explanation: This query deletes the student record with a 'StudentID' of 1234 from the 'Students' table.\n            Similarity Score: 0.7786\n\nPrompt: Insert a new student record into the 'Students' table\n            SQL: INSERT INTO Students (StudentID, FirstName, LastName, Age, Gender, Grade) VALUES (1234, 'John', 'Doe', 16, 'Male', 11);\n            Explanation: This query inserts a new record into the 'Students' table for a student named John Doe who is 16 years old, Male, and in the 11th grade.\n            Similarity Score: 0.8040\n\nPrompt: Insert a new student record into the 'students' table\n            SQL: INSERT INTO students (student_id, name, grade, mental_health_score) VALUES (101, 'Jamal Johnson', 11, 75);\n            Explanation: Insert a new record into the 'students' table with a student_id of 101, name of Jamal Johnson, grade of 11, and mental health score of 75.\n            Similarity Score: 0.8040","SELECT marks FROM student_records;","6.626508474349976"
"2025-04-23 20:19:00","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","-- GIVE ME MARKS","Prompt: Update the score of all comments with the word ""bad"" in the content to -5.\n            SQL: UPDATE comments SET score = -5 WHERE content LIKE '%bad%';\n            Explanation: Update the score of all comments with the word ""bad"" in the content to -5.\n            Similarity Score: 1.4224\n\nPrompt: How many goals has Player X scored?\n            SQL: SELECT SUM(goals) FROM Players WHERE player_id = 'Player X';\n            Explanation: This query calculates the total number of goals scored by Player X by summing the 'goals' column, filtered by the 'player_id' being 'Player X'.\n            Similarity Score: 1.4557\n\nPrompt: What are the total points scored by players from Australia and New Zealand in the 2020 season?\n            SQL: SELECT SUM(points) FROM players WHERE (nationality = 'Australia' OR nationality = 'New Zealand') AND season = 2020;\n            Explanation: This query calculates the total points scored by players from Australia and New Zealand in the 2020 season. It does so by summing the 'points' column for rows where the 'nationality' is either 'Australia' or 'New Zealand' and the 'season' is 2020.\n            Similarity Score: 1.4841\n\nPrompt: How many goals were scored by the top scorer in 2022?\n            SQL: SELECT player, SUM(goals) FROM scores WHERE year = 2022 GROUP BY player ORDER BY SUM(goals) DESC LIMIT 1;\n            Explanation: Filter goals scored in 2022, find the top scorer by calculating the total number of goals, and return only the top scorer's information.\n            Similarity Score: 1.4869\n\nPrompt: How many goals did Messi score in 2019?\n            SQL: SELECT goals FROM player_stats WHERE player = 'Messi' AND year = 2019;\n            Explanation: * Retrieve the goals scored by 'Messi' in the year 2019 from the 'player_stats' table\n            Similarity Score: 1.4951","SELECT marks FROM student_records;","2.9464619159698486"
