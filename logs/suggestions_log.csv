"timestamp","model","status","user_input","retrieved_context","llm_suggestion","latency_ms"
"2025-04-23 20:27:40","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.9054\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.9227\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.9301\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.9545\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.9569","SELECT COUNT(trophy) as total_trophies FROM RCB;","9.069239377975464"
"2025-04-23 20:28:06","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.9054\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.9227\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.9301\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.9545\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.9569","SELECT COUNT(trophy_wins) AS total_trophies FROM RCB;","4.682927131652832"
"2025-04-23 20:28:21","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.9054\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.9227\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.9301\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.9545\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.9569","SELECT COUNT(trophy) as total_trophies FROM RCB;","3.5865023136138916"
"2025-04-23 20:52:37","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.9054\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.9227\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.9301\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.9545\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.9569","SELECT COUNT(trophy) as total_trophies FROM RCB;","7.279759883880615"
"2025-04-23 20:53:16","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","-- now check how many trophies has this team lost in last 10 years","Prompt: Which team has the most titles in the last decade?\n            SQL: SELECT name, MAX(titles) FROM teams WHERE league = 'National' AND last_title_date >= DATE('2011-01-01') GROUP BY name;\n            Explanation: Filter teams based on league and championships won in the last decade, and find the team with the most titles.\n            Similarity Score: 0.7225\n\nPrompt: List the teams that have conceded less than 10 goals in their last 5 games.\n            SQL: SELECT team FROM (SELECT team, SUM(goals_conceded) AS goals_conceded FROM games WHERE game_date > DATE_SUB(CURRENT_DATE, INTERVAL 5 DAY) GROUP BY team) AS subquery WHERE goals_conceded < 10;\n            Explanation: The subquery calculates the total goals conceded by each team in their last 5 games by filtering the games table with a WHERE clause to only include games with a date greater than 5 days before the current date, grouping the results by the team column, and summing the goals_conceded column. The outer query then filters the results to only include teams with a total goals conceded less than 10.\n            Similarity Score: 0.7543\n\nPrompt: What is the win-loss record for each team in the current season?\n            SQL: SELECT t.team_name, SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END) as wins, SUM(CASE WHEN NOT m.home_team_won THEN 1 ELSE 0 END) as losses FROM matches m JOIN teams t ON (m.home_team_id = t.team_id OR m.away_team_id = t.team_id) GROUP BY t.team_name;\n            Explanation: The SQL query calculates the win-loss record for each team by joining the teams and matches tables on the home_team_id and away_team_id columns. It then uses conditional aggregation (SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END)) to count the number of wins and losses for each team.\n            Similarity Score: 0.8035\n\nPrompt: What is the minimum number of wins for teams that have won a championship in the last 5 years?\n            SQL: SELECT MIN(teams.wins) FROM teams WHERE teams.championships > 0;\n            Explanation: This query calculates the minimum number of wins for teams that have won a championship in the last 5 years. It does this by selecting the minimum value of the 'wins' field in the 'teams' table where the 'championships' field is greater than 0.\n            Similarity Score: 0.8795\n\nPrompt: How many matches were won by home teams in the English Premier League in the last 5 years?\n            SQL: SELECT COUNT(*) FROM Matches WHERE HomeTeam = ANY(SELECT HomeTeam FROM Matches WHERE Year BETWEEN (SELECT MAX(Year) FROM Matches) - 5 AND (SELECT MAX(Year) FROM Matches));\n            Explanation: This SQL query calculates the number of matches won by home teams in the last 5 years. It uses the COUNT function to count the number of matches where the HomeTeam is in the list of home teams from the last 5 years, which is determined using a subquery with the WHERE clause.\n            Similarity Score: 0.8864","SELECT COUNT(trophy_lost) as total_trophies_lost FROM RCB WHERE year BETWEEN (SELECT MAX(year) FROM RCB) -10 AND (SELECT MAX(year) FROM RCB);","4.247629165649414"
"2025-04-23 20:58:05","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.9054\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.9227\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.9301\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.9545\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.9569","SELECT COUNT(trophy_wins) FROM RCB;","8.186481237411499"
"2025-04-23 20:58:23","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","-- now check how many trophies has this team lost in the last 10 years","Prompt: Which team has the most titles in the last decade?\n            SQL: SELECT name, MAX(titles) FROM teams WHERE league = 'National' AND last_title_date >= DATE('2011-01-01') GROUP BY name;\n            Explanation: Filter teams based on league and championships won in the last decade, and find the team with the most titles.\n            Similarity Score: 0.7349\n\nPrompt: List the teams that have conceded less than 10 goals in their last 5 games.\n            SQL: SELECT team FROM (SELECT team, SUM(goals_conceded) AS goals_conceded FROM games WHERE game_date > DATE_SUB(CURRENT_DATE, INTERVAL 5 DAY) GROUP BY team) AS subquery WHERE goals_conceded < 10;\n            Explanation: The subquery calculates the total goals conceded by each team in their last 5 games by filtering the games table with a WHERE clause to only include games with a date greater than 5 days before the current date, grouping the results by the team column, and summing the goals_conceded column. The outer query then filters the results to only include teams with a total goals conceded less than 10.\n            Similarity Score: 0.7626\n\nPrompt: What is the win-loss record for each team in the current season?\n            SQL: SELECT t.team_name, SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END) as wins, SUM(CASE WHEN NOT m.home_team_won THEN 1 ELSE 0 END) as losses FROM matches m JOIN teams t ON (m.home_team_id = t.team_id OR m.away_team_id = t.team_id) GROUP BY t.team_name;\n            Explanation: The SQL query calculates the win-loss record for each team by joining the teams and matches tables on the home_team_id and away_team_id columns. It then uses conditional aggregation (SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END)) to count the number of wins and losses for each team.\n            Similarity Score: 0.8068\n\nPrompt: What is the minimum number of wins for teams that have won a championship in the last 5 years?\n            SQL: SELECT MIN(teams.wins) FROM teams WHERE teams.championships > 0;\n            Explanation: This query calculates the minimum number of wins for teams that have won a championship in the last 5 years. It does this by selecting the minimum value of the 'wins' field in the 'teams' table where the 'championships' field is greater than 0.\n            Similarity Score: 0.8706\n\nPrompt: What is the number of wins and losses for each team in the current season?\n            SQL: SELECT team_id, SUM(CASE WHEN result = 'Win' THEN 1 ELSE 0 END) AS wins, SUM(CASE WHEN result = 'Loss' THEN 1 ELSE 0 END) AS losses FROM games GROUP BY team_id;\n            Explanation: This query uses conditional aggregation (SUM and CASE WHEN) to calculate the number of wins and losses for each team based on the 'result' column of the 'games' table.\n            Similarity Score: 0.8907","SELECT COUNT(trophy_lost) FROM RCB WHERE trophy_lost_date >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR);","6.498422622680664"
"2025-05-07 23:03:02","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.9054\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.9227\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.9301\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.9545\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.9569","SELECT COUNT(trophy) as total_trophies FROM RCB;","8.658015251159668"
"2025-05-07 23:03:29","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","-- now check how many trophies has this team lost in the last 10 years","Prompt: Which team has the most titles in the last decade?\n            SQL: SELECT name, MAX(titles) FROM teams WHERE league = 'National' AND last_title_date >= DATE('2011-01-01') GROUP BY name;\n            Explanation: Filter teams based on league and championships won in the last decade, and find the team with the most titles.\n            Similarity Score: 0.7349\n\nPrompt: List the teams that have conceded less than 10 goals in their last 5 games.\n            SQL: SELECT team FROM (SELECT team, SUM(goals_conceded) AS goals_conceded FROM games WHERE game_date > DATE_SUB(CURRENT_DATE, INTERVAL 5 DAY) GROUP BY team) AS subquery WHERE goals_conceded < 10;\n            Explanation: The subquery calculates the total goals conceded by each team in their last 5 games by filtering the games table with a WHERE clause to only include games with a date greater than 5 days before the current date, grouping the results by the team column, and summing the goals_conceded column. The outer query then filters the results to only include teams with a total goals conceded less than 10.\n            Similarity Score: 0.7626\n\nPrompt: What is the win-loss record for each team in the current season?\n            SQL: SELECT t.team_name, SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END) as wins, SUM(CASE WHEN NOT m.home_team_won THEN 1 ELSE 0 END) as losses FROM matches m JOIN teams t ON (m.home_team_id = t.team_id OR m.away_team_id = t.team_id) GROUP BY t.team_name;\n            Explanation: The SQL query calculates the win-loss record for each team by joining the teams and matches tables on the home_team_id and away_team_id columns. It then uses conditional aggregation (SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END)) to count the number of wins and losses for each team.\n            Similarity Score: 0.8068\n\nPrompt: What is the minimum number of wins for teams that have won a championship in the last 5 years?\n            SQL: SELECT MIN(teams.wins) FROM teams WHERE teams.championships > 0;\n            Explanation: This query calculates the minimum number of wins for teams that have won a championship in the last 5 years. It does this by selecting the minimum value of the 'wins' field in the 'teams' table where the 'championships' field is greater than 0.\n            Similarity Score: 0.8706\n\nPrompt: What is the number of wins and losses for each team in the current season?\n            SQL: SELECT team_id, SUM(CASE WHEN result = 'Win' THEN 1 ELSE 0 END) AS wins, SUM(CASE WHEN result = 'Loss' THEN 1 ELSE 0 END) AS losses FROM games GROUP BY team_id;\n            Explanation: This query uses conditional aggregation (SUM and CASE WHEN) to calculate the number of wins and losses for each team based on the 'result' column of the 'games' table.\n            Similarity Score: 0.8907","SELECT COUNT(trophy_lost) as total_trophies_lost FROM RCB WHERE trophy_lost_date >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR);","2.8546319007873535"
"2025-05-12 12:19:22","llama-3.3-70b-versatile","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.5472\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.5385\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.5349\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.5224\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.5213","SELECT COUNT(Trophies) as TotalTrophies FROM RCB","35.24385452270508"
"2025-05-12 12:20:00","llama-3.3-70b-versatile","ACCEPTED","-- now check how many trophies has this team lost in the last 10 years","Prompt: Which team has the most titles in the last decade?\n            SQL: SELECT name, MAX(titles) FROM teams WHERE league = 'National' AND last_title_date >= DATE('2011-01-01') GROUP BY name;\n            Explanation: Filter teams based on league and championships won in the last decade, and find the team with the most titles.\n            Similarity Score: 0.6327\n\nPrompt: List the teams that have conceded less than 10 goals in their last 5 games.\n            SQL: SELECT team FROM (SELECT team, SUM(goals_conceded) AS goals_conceded FROM games WHERE game_date > DATE_SUB(CURRENT_DATE, INTERVAL 5 DAY) GROUP BY team) AS subquery WHERE goals_conceded < 10;\n            Explanation: The subquery calculates the total goals conceded by each team in their last 5 games by filtering the games table with a WHERE clause to only include games with a date greater than 5 days before the current date, grouping the results by the team column, and summing the goals_conceded column. The outer query then filters the results to only include teams with a total goals conceded less than 10.\n            Similarity Score: 0.6185\n\nPrompt: What is the win-loss record for each team in the current season?\n            SQL: SELECT t.team_name, SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END) as wins, SUM(CASE WHEN NOT m.home_team_won THEN 1 ELSE 0 END) as losses FROM matches m JOIN teams t ON (m.home_team_id = t.team_id OR m.away_team_id = t.team_id) GROUP BY t.team_name;\n            Explanation: The SQL query calculates the win-loss record for each team by joining the teams and matches tables on the home_team_id and away_team_id columns. It then uses conditional aggregation (SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END)) to count the number of wins and losses for each team.\n            Similarity Score: 0.5963\n\nPrompt: What is the minimum number of wins for teams that have won a championship in the last 5 years?\n            SQL: SELECT MIN(teams.wins) FROM teams WHERE teams.championships > 0;\n            Explanation: This query calculates the minimum number of wins for teams that have won a championship in the last 5 years. It does this by selecting the minimum value of the 'wins' field in the 'teams' table where the 'championships' field is greater than 0.\n            Similarity Score: 0.5645\n\nPrompt: What is the number of wins and losses for each team in the current season?\n            SQL: SELECT team_id, SUM(CASE WHEN result = 'Win' THEN 1 ELSE 0 END) AS wins, SUM(CASE WHEN result = 'Loss' THEN 1 ELSE 0 END) AS losses FROM games GROUP BY team_id;\n            Explanation: This query uses conditional aggregation (SUM and CASE WHEN) to calculate the number of wins and losses for each team based on the 'result' column of the 'games' table.\n            Similarity Score: 0.5545","SELECT COUNT(Trophies_Lost) as TotalTrophiesLost FROM RCB WHERE Year >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR)","24.460654973983765"
"2025-05-12 12:22:08","llama-3.3-70b-versatile","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.5472\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.5385\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.5349\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.5224\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.5213","SELECT COUNT(trophy_name) as total_trophies FROM RCB","21.909196615219116"
"2025-05-12 12:22:29","llama-3.3-70b-versatile","ACCEPTED","-- now check how many trophies has this team lost in the last 10 years","Prompt: Which team has the most titles in the last decade?\n            SQL: SELECT name, MAX(titles) FROM teams WHERE league = 'National' AND last_title_date >= DATE('2011-01-01') GROUP BY name;\n            Explanation: Filter teams based on league and championships won in the last decade, and find the team with the most titles.\n            Similarity Score: 0.6327\n\nPrompt: List the teams that have conceded less than 10 goals in their last 5 games.\n            SQL: SELECT team FROM (SELECT team, SUM(goals_conceded) AS goals_conceded FROM games WHERE game_date > DATE_SUB(CURRENT_DATE, INTERVAL 5 DAY) GROUP BY team) AS subquery WHERE goals_conceded < 10;\n            Explanation: The subquery calculates the total goals conceded by each team in their last 5 games by filtering the games table with a WHERE clause to only include games with a date greater than 5 days before the current date, grouping the results by the team column, and summing the goals_conceded column. The outer query then filters the results to only include teams with a total goals conceded less than 10.\n            Similarity Score: 0.6185\n\nPrompt: What is the win-loss record for each team in the current season?\n            SQL: SELECT t.team_name, SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END) as wins, SUM(CASE WHEN NOT m.home_team_won THEN 1 ELSE 0 END) as losses FROM matches m JOIN teams t ON (m.home_team_id = t.team_id OR m.away_team_id = t.team_id) GROUP BY t.team_name;\n            Explanation: The SQL query calculates the win-loss record for each team by joining the teams and matches tables on the home_team_id and away_team_id columns. It then uses conditional aggregation (SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END)) to count the number of wins and losses for each team.\n            Similarity Score: 0.5963\n\nPrompt: What is the minimum number of wins for teams that have won a championship in the last 5 years?\n            SQL: SELECT MIN(teams.wins) FROM teams WHERE teams.championships > 0;\n            Explanation: This query calculates the minimum number of wins for teams that have won a championship in the last 5 years. It does this by selecting the minimum value of the 'wins' field in the 'teams' table where the 'championships' field is greater than 0.\n            Similarity Score: 0.5645\n\nPrompt: What is the number of wins and losses for each team in the current season?\n            SQL: SELECT team_id, SUM(CASE WHEN result = 'Win' THEN 1 ELSE 0 END) AS wins, SUM(CASE WHEN result = 'Loss' THEN 1 ELSE 0 END) AS losses FROM games GROUP BY team_id;\n            Explanation: This query uses conditional aggregation (SUM and CASE WHEN) to calculate the number of wins and losses for each team based on the 'result' column of the 'games' table.\n            Similarity Score: 0.5545","SELECT COUNT(trophy_name) as total_trophies_lost FROM RCB WHERE year_lost >= DATE('2013-01-01')","12.284270286560059"
"2025-05-12 12:26:37","llama-3.3-70b-versatile","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.9054\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.9227\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.9301\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.9545\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.9569","SELECT COUNT(Trophies) as TotalTrophies FROM RCB","7.160202741622925"
"2025-05-12 12:26:54","llama-3.3-70b-versatile","ACCEPTED","-- now check how many trophies has this team lost in the last 10 years","Prompt: Which team has the most titles in the last decade?\n            SQL: SELECT name, MAX(titles) FROM teams WHERE league = 'National' AND last_title_date >= DATE('2011-01-01') GROUP BY name;\n            Explanation: Filter teams based on league and championships won in the last decade, and find the team with the most titles.\n            Similarity Score: 0.7349\n\nPrompt: List the teams that have conceded less than 10 goals in their last 5 games.\n            SQL: SELECT team FROM (SELECT team, SUM(goals_conceded) AS goals_conceded FROM games WHERE game_date > DATE_SUB(CURRENT_DATE, INTERVAL 5 DAY) GROUP BY team) AS subquery WHERE goals_conceded < 10;\n            Explanation: The subquery calculates the total goals conceded by each team in their last 5 games by filtering the games table with a WHERE clause to only include games with a date greater than 5 days before the current date, grouping the results by the team column, and summing the goals_conceded column. The outer query then filters the results to only include teams with a total goals conceded less than 10.\n            Similarity Score: 0.7626\n\nPrompt: What is the win-loss record for each team in the current season?\n            SQL: SELECT t.team_name, SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END) as wins, SUM(CASE WHEN NOT m.home_team_won THEN 1 ELSE 0 END) as losses FROM matches m JOIN teams t ON (m.home_team_id = t.team_id OR m.away_team_id = t.team_id) GROUP BY t.team_name;\n            Explanation: The SQL query calculates the win-loss record for each team by joining the teams and matches tables on the home_team_id and away_team_id columns. It then uses conditional aggregation (SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END)) to count the number of wins and losses for each team.\n            Similarity Score: 0.8068\n\nPrompt: What is the minimum number of wins for teams that have won a championship in the last 5 years?\n            SQL: SELECT MIN(teams.wins) FROM teams WHERE teams.championships > 0;\n            Explanation: This query calculates the minimum number of wins for teams that have won a championship in the last 5 years. It does this by selecting the minimum value of the 'wins' field in the 'teams' table where the 'championships' field is greater than 0.\n            Similarity Score: 0.8706\n\nPrompt: What is the number of wins and losses for each team in the current season?\n            SQL: SELECT team_id, SUM(CASE WHEN result = 'Win' THEN 1 ELSE 0 END) AS wins, SUM(CASE WHEN result = 'Loss' THEN 1 ELSE 0 END) AS losses FROM games GROUP BY team_id;\n            Explanation: This query uses conditional aggregation (SUM and CASE WHEN) to calculate the number of wins and losses for each team based on the 'result' column of the 'games' table.\n            Similarity Score: 0.8907","SELECT COUNT(Trophies_Lost) as TotalTrophiesLost FROM RCB WHERE Year >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR)","3.5694494247436523"
"2025-05-12 12:27:08","llama-3.3-70b-versatile","ACCEPTED","-- now check how many trophies has this team won in the last 10 years","Prompt: Which team has the most titles in the last decade?\n            SQL: SELECT name, MAX(titles) FROM teams WHERE league = 'National' AND last_title_date >= DATE('2011-01-01') GROUP BY name;\n            Explanation: Filter teams based on league and championships won in the last decade, and find the team with the most titles.\n            Similarity Score: 0.6594\n\nPrompt: List the teams that have conceded less than 10 goals in their last 5 games.\n            SQL: SELECT team FROM (SELECT team, SUM(goals_conceded) AS goals_conceded FROM games WHERE game_date > DATE_SUB(CURRENT_DATE, INTERVAL 5 DAY) GROUP BY team) AS subquery WHERE goals_conceded < 10;\n            Explanation: The subquery calculates the total goals conceded by each team in their last 5 games by filtering the games table with a WHERE clause to only include games with a date greater than 5 days before the current date, grouping the results by the team column, and summing the goals_conceded column. The outer query then filters the results to only include teams with a total goals conceded less than 10.\n            Similarity Score: 0.7917\n\nPrompt: List the teams that have played more than 10 games in the 'games' table.\n            SQL: SELECT team, COUNT(*) as games_played FROM games WHERE played = TRUE GROUP BY team HAVING games_played > 10;\n            Explanation: Count the number of rows where 'played' is TRUE for each team, grouped by team, and return teams that have played more than 10 games.\n            Similarity Score: 0.8773\n\nPrompt: What is the minimum number of wins for teams that have won a championship in the last 5 years?\n            SQL: SELECT MIN(teams.wins) FROM teams WHERE teams.championships > 0;\n            Explanation: This query calculates the minimum number of wins for teams that have won a championship in the last 5 years. It does this by selecting the minimum value of the 'wins' field in the 'teams' table where the 'championships' field is greater than 0.\n            Similarity Score: 0.8825\n\nPrompt: How many matches were won by home teams in the English Premier League in the last 5 years?\n            SQL: SELECT COUNT(*) FROM Matches WHERE HomeTeam = ANY(SELECT HomeTeam FROM Matches WHERE Year BETWEEN (SELECT MAX(Year) FROM Matches) - 5 AND (SELECT MAX(Year) FROM Matches));\n            Explanation: This SQL query calculates the number of matches won by home teams in the last 5 years. It uses the COUNT function to count the number of matches where the HomeTeam is in the list of home teams from the last 5 years, which is determined using a subquery with the WHERE clause.\n            Similarity Score: 0.8834","SELECT COUNT(Trophies) as TotalTrophiesWon FROM RCB WHERE Year >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR)","5.664924144744873"
"2025-05-12 21:19:32","llama-3.3-70b-versatile","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.9054\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.9227\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.9301\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.9545\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.9569","SELECT COUNT(trophy_name) as total_trophies FROM RCB","9.94609808921814"
"2025-05-12 21:19:48","llama-3.3-70b-versatile","ACCEPTED","-- now check how many trophies has this team lost in the last 10 years","Prompt: Which team has the most titles in the last decade?\n            SQL: SELECT name, MAX(titles) FROM teams WHERE league = 'National' AND last_title_date >= DATE('2011-01-01') GROUP BY name;\n            Explanation: Filter teams based on league and championships won in the last decade, and find the team with the most titles.\n            Similarity Score: 0.7349\n\nPrompt: List the teams that have conceded less than 10 goals in their last 5 games.\n            SQL: SELECT team FROM (SELECT team, SUM(goals_conceded) AS goals_conceded FROM games WHERE game_date > DATE_SUB(CURRENT_DATE, INTERVAL 5 DAY) GROUP BY team) AS subquery WHERE goals_conceded < 10;\n            Explanation: The subquery calculates the total goals conceded by each team in their last 5 games by filtering the games table with a WHERE clause to only include games with a date greater than 5 days before the current date, grouping the results by the team column, and summing the goals_conceded column. The outer query then filters the results to only include teams with a total goals conceded less than 10.\n            Similarity Score: 0.7626\n\nPrompt: What is the win-loss record for each team in the current season?\n            SQL: SELECT t.team_name, SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END) as wins, SUM(CASE WHEN NOT m.home_team_won THEN 1 ELSE 0 END) as losses FROM matches m JOIN teams t ON (m.home_team_id = t.team_id OR m.away_team_id = t.team_id) GROUP BY t.team_name;\n            Explanation: The SQL query calculates the win-loss record for each team by joining the teams and matches tables on the home_team_id and away_team_id columns. It then uses conditional aggregation (SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END)) to count the number of wins and losses for each team.\n            Similarity Score: 0.8068\n\nPrompt: What is the minimum number of wins for teams that have won a championship in the last 5 years?\n            SQL: SELECT MIN(teams.wins) FROM teams WHERE teams.championships > 0;\n            Explanation: This query calculates the minimum number of wins for teams that have won a championship in the last 5 years. It does this by selecting the minimum value of the 'wins' field in the 'teams' table where the 'championships' field is greater than 0.\n            Similarity Score: 0.8706\n\nPrompt: What is the number of wins and losses for each team in the current season?\n            SQL: SELECT team_id, SUM(CASE WHEN result = 'Win' THEN 1 ELSE 0 END) AS wins, SUM(CASE WHEN result = 'Loss' THEN 1 ELSE 0 END) AS losses FROM games GROUP BY team_id;\n            Explanation: This query uses conditional aggregation (SUM and CASE WHEN) to calculate the number of wins and losses for each team based on the 'result' column of the 'games' table.\n            Similarity Score: 0.8907","SELECT COUNT(trophy_name) as total_trophies_lost FROM RCB WHERE year_lost >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR)","4.950045824050903"
"2025-05-12 21:20:04","llama-3.3-70b-versatile","ACCEPTED","-- now check how many trophies has this team won in the last 10 years","Prompt: Which team has the most titles in the last decade?\n            SQL: SELECT name, MAX(titles) FROM teams WHERE league = 'National' AND last_title_date >= DATE('2011-01-01') GROUP BY name;\n            Explanation: Filter teams based on league and championships won in the last decade, and find the team with the most titles.\n            Similarity Score: 0.6594\n\nPrompt: List the teams that have conceded less than 10 goals in their last 5 games.\n            SQL: SELECT team FROM (SELECT team, SUM(goals_conceded) AS goals_conceded FROM games WHERE game_date > DATE_SUB(CURRENT_DATE, INTERVAL 5 DAY) GROUP BY team) AS subquery WHERE goals_conceded < 10;\n            Explanation: The subquery calculates the total goals conceded by each team in their last 5 games by filtering the games table with a WHERE clause to only include games with a date greater than 5 days before the current date, grouping the results by the team column, and summing the goals_conceded column. The outer query then filters the results to only include teams with a total goals conceded less than 10.\n            Similarity Score: 0.7917\n\nPrompt: List the teams that have played more than 10 games in the 'games' table.\n            SQL: SELECT team, COUNT(*) as games_played FROM games WHERE played = TRUE GROUP BY team HAVING games_played > 10;\n            Explanation: Count the number of rows where 'played' is TRUE for each team, grouped by team, and return teams that have played more than 10 games.\n            Similarity Score: 0.8773\n\nPrompt: What is the minimum number of wins for teams that have won a championship in the last 5 years?\n            SQL: SELECT MIN(teams.wins) FROM teams WHERE teams.championships > 0;\n            Explanation: This query calculates the minimum number of wins for teams that have won a championship in the last 5 years. It does this by selecting the minimum value of the 'wins' field in the 'teams' table where the 'championships' field is greater than 0.\n            Similarity Score: 0.8825\n\nPrompt: How many matches were won by home teams in the English Premier League in the last 5 years?\n            SQL: SELECT COUNT(*) FROM Matches WHERE HomeTeam = ANY(SELECT HomeTeam FROM Matches WHERE Year BETWEEN (SELECT MAX(Year) FROM Matches) - 5 AND (SELECT MAX(Year) FROM Matches));\n            Explanation: This SQL query calculates the number of matches won by home teams in the last 5 years. It uses the COUNT function to count the number of matches where the HomeTeam is in the list of home teams from the last 5 years, which is determined using a subquery with the WHERE clause.\n            Similarity Score: 0.8834","SELECT COUNT(trophy_name) as total_trophies_won FROM RCB WHERE year_won >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR)","4.079925775527954"
"2025-05-12 22:56:56","llama-3.3-70b-versatile","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.9054\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.9227\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.9301\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.9545\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.9569","SELECT COUNT(trophy_name) as total_trophies FROM RCB","11.19644546508789"
"2025-05-12 22:57:09","llama-3.3-70b-versatile","ACCEPTED","-- now check how many trophies has this team lost in the last 10 years","Prompt: Which team has the most titles in the last decade?\n            SQL: SELECT name, MAX(titles) FROM teams WHERE league = 'National' AND last_title_date >= DATE('2011-01-01') GROUP BY name;\n            Explanation: Filter teams based on league and championships won in the last decade, and find the team with the most titles.\n            Similarity Score: 0.7349\n\nPrompt: List the teams that have conceded less than 10 goals in their last 5 games.\n            SQL: SELECT team FROM (SELECT team, SUM(goals_conceded) AS goals_conceded FROM games WHERE game_date > DATE_SUB(CURRENT_DATE, INTERVAL 5 DAY) GROUP BY team) AS subquery WHERE goals_conceded < 10;\n            Explanation: The subquery calculates the total goals conceded by each team in their last 5 games by filtering the games table with a WHERE clause to only include games with a date greater than 5 days before the current date, grouping the results by the team column, and summing the goals_conceded column. The outer query then filters the results to only include teams with a total goals conceded less than 10.\n            Similarity Score: 0.7626\n\nPrompt: What is the win-loss record for each team in the current season?\n            SQL: SELECT t.team_name, SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END) as wins, SUM(CASE WHEN NOT m.home_team_won THEN 1 ELSE 0 END) as losses FROM matches m JOIN teams t ON (m.home_team_id = t.team_id OR m.away_team_id = t.team_id) GROUP BY t.team_name;\n            Explanation: The SQL query calculates the win-loss record for each team by joining the teams and matches tables on the home_team_id and away_team_id columns. It then uses conditional aggregation (SUM(CASE WHEN m.home_team_won THEN 1 ELSE 0 END)) to count the number of wins and losses for each team.\n            Similarity Score: 0.8068\n\nPrompt: What is the minimum number of wins for teams that have won a championship in the last 5 years?\n            SQL: SELECT MIN(teams.wins) FROM teams WHERE teams.championships > 0;\n            Explanation: This query calculates the minimum number of wins for teams that have won a championship in the last 5 years. It does this by selecting the minimum value of the 'wins' field in the 'teams' table where the 'championships' field is greater than 0.\n            Similarity Score: 0.8706\n\nPrompt: What is the number of wins and losses for each team in the current season?\n            SQL: SELECT team_id, SUM(CASE WHEN result = 'Win' THEN 1 ELSE 0 END) AS wins, SUM(CASE WHEN result = 'Loss' THEN 1 ELSE 0 END) AS losses FROM games GROUP BY team_id;\n            Explanation: This query uses conditional aggregation (SUM and CASE WHEN) to calculate the number of wins and losses for each team based on the 'result' column of the 'games' table.\n            Similarity Score: 0.8907","SELECT COUNT(trophy_name) as total_trophies_lost FROM RCB WHERE year_lost >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR)","4.173070907592773"
"2025-05-12 22:57:23","llama-3.3-70b-versatile","ACCEPTED","-- now check how many trophies has this team won in the last 10 years","Prompt: Which team has the most titles in the last decade?\n            SQL: SELECT name, MAX(titles) FROM teams WHERE league = 'National' AND last_title_date >= DATE('2011-01-01') GROUP BY name;\n            Explanation: Filter teams based on league and championships won in the last decade, and find the team with the most titles.\n            Similarity Score: 0.6594\n\nPrompt: List the teams that have conceded less than 10 goals in their last 5 games.\n            SQL: SELECT team FROM (SELECT team, SUM(goals_conceded) AS goals_conceded FROM games WHERE game_date > DATE_SUB(CURRENT_DATE, INTERVAL 5 DAY) GROUP BY team) AS subquery WHERE goals_conceded < 10;\n            Explanation: The subquery calculates the total goals conceded by each team in their last 5 games by filtering the games table with a WHERE clause to only include games with a date greater than 5 days before the current date, grouping the results by the team column, and summing the goals_conceded column. The outer query then filters the results to only include teams with a total goals conceded less than 10.\n            Similarity Score: 0.7917\n\nPrompt: List the teams that have played more than 10 games in the 'games' table.\n            SQL: SELECT team, COUNT(*) as games_played FROM games WHERE played = TRUE GROUP BY team HAVING games_played > 10;\n            Explanation: Count the number of rows where 'played' is TRUE for each team, grouped by team, and return teams that have played more than 10 games.\n            Similarity Score: 0.8773\n\nPrompt: What is the minimum number of wins for teams that have won a championship in the last 5 years?\n            SQL: SELECT MIN(teams.wins) FROM teams WHERE teams.championships > 0;\n            Explanation: This query calculates the minimum number of wins for teams that have won a championship in the last 5 years. It does this by selecting the minimum value of the 'wins' field in the 'teams' table where the 'championships' field is greater than 0.\n            Similarity Score: 0.8825\n\nPrompt: How many matches were won by home teams in the English Premier League in the last 5 years?\n            SQL: SELECT COUNT(*) FROM Matches WHERE HomeTeam = ANY(SELECT HomeTeam FROM Matches WHERE Year BETWEEN (SELECT MAX(Year) FROM Matches) - 5 AND (SELECT MAX(Year) FROM Matches));\n            Explanation: This SQL query calculates the number of matches won by home teams in the last 5 years. It uses the COUNT function to count the number of matches where the HomeTeam is in the list of home teams from the last 5 years, which is determined using a subquery with the WHERE clause.\n            Similarity Score: 0.8834","SELECT COUNT(trophy_name) as total_trophies_won FROM RCB WHERE year_won >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR)","3.586177110671997"
"2025-05-12 22:59:27","llama-3.3-70b-versatile","ACCEPTED","-- fetch marks of laxmikant in the subjects which he failed in 1st semester","Prompt: How many students have passed the exam in each subject area in the last academic year?\n            SQL: SELECT subject_area, COUNT(student_id) as num_students_passed FROM exam_results WHERE exam_date >= DATEADD(year, -1, CURRENT_TIMESTAMP) AND passed = true GROUP BY subject_area;\n            Explanation: Calculate the number of students who have passed the exam in each subject area in the last academic year by partitioning the data by subject_area and aggregating with COUNT function. Only consider the exam results with passed = true.\n            Similarity Score: 1.0617\n\nPrompt: What is the percentage of students who passed the exam in each subject?\n            SQL: SELECT subject, AVG(passed) * 100.0 AS pass_percentage FROM student GROUP BY subject;\n            Explanation: This SQL query calculates the percentage of students who passed the exam in each subject by grouping the student table by the subject column, and then calculating the average value of the passed column (which is 1 for passed and 0 for not passed) per group, and multiplying by 100 to convert to a percentage.\n            Similarity Score: 1.1185\n\nPrompt: What is the percentage of students who passed the last exam in each district?\n            SQL: SELECT d.district_name, (COUNT(s.student_id) - SUM(CASE WHEN s.passed_last_exam = FALSE THEN 1 ELSE 0 END)) * 100.0 / COUNT(s.student_id) as pass_percentage FROM students s JOIN districts d ON s.district_id = d.district_id GROUP BY d.district_name;\n            Explanation: This query calculates the percentage of students who passed the last exam in each district. It does so by joining the students table and the districts table on district_id, grouping by district_name, and calculating the percentage of students who passed the last exam for each group.\n            Similarity Score: 1.1267\n\nPrompt: What is the number of students who have passed and failed each course, grouped by course and ordered by the number of students who have passed in descending order?\n            SQL: SELECT c.course_name, SUM(CASE WHEN p.pass_fail = 'PASS' THEN 1 ELSE 0 END) as num_passed, SUM(CASE WHEN p.pass_fail = 'FAIL' THEN 1 ELSE 0 END) as num_failed FROM courses c JOIN professional_development p ON c.course_id = p.course_id GROUP BY c.course_name ORDER BY num_passed DESC;\n            Explanation: First, we perform an inner join between the courses and professional_development tables using the course_id as the common identifier. Then, we group the results by course_name and count the number of students who have passed and failed each course. Finally, we order the results by the number of students who have passed in descending order.\n            Similarity Score: 1.1407\n\nPrompt: What is the percentage of students who have achieved proficiency in each subject?\n            SQL: SELECT subject, AVG(proficiency) * 100 AS percentage_proficient FROM student_proficiency GROUP BY subject;\n            Explanation: This SQL query calculates the percentage of students who have achieved proficiency in each subject. It uses the GROUP BY clause to group the results by the 'subject' column, and the AVG function to calculate the average proficiency score for each subject. The result is then multiplied by 100 to convert it to a percentage.\n            Similarity Score: 1.1553","SELECT subject, marks FROM student_results WHERE student_name = 'Laxmikant' AND semester = '1st' AND marks < passing_marks;","4.548747777938843"
"2025-05-13 00:09:06","llama-3.3-70b-versatile","ACCEPTED","/*\nFetch data from ""RCB"" table\nand check the number of throphies the RCB team has won\n*/","Prompt: Count the number of wins for each team in the 'team_performances' table.\n            SQL: SELECT team, SUM(wins) FROM team_performances GROUP BY team;\n            Explanation: This query counts the number of wins for each team in the 'team_performances' table. It uses the SUM function to find the total wins for each team and the GROUP BY clause to group the results by team.\n            Similarity Score: 0.9054\n\nPrompt: Show the total number of matches won by the 'cricket_teams' table in ascending order.\n            SQL: SELECT team_name, SUM(wins) as total_wins FROM cricket_teams GROUP BY team_name ORDER BY total_wins ASC;\n            Explanation: This SQL query calculates the total number of matches won by each team in the 'cricket_teams' table and displays the results in ascending order by using the SUM function on the 'wins' column, GROUP BY clause to group the records by 'team_name', and ORDER BY clause to sort the results.\n            Similarity Score: 0.9227\n\nPrompt: Count the number of wins and losses for each player in 'match_results' table.\n            SQL: SELECT PlayerID, SUM(CASE WHEN Result = 'Win' THEN 1 ELSE 0 END) AS Wins, SUM(CASE WHEN Result = 'Loss' THEN 1 ELSE 0 END) AS Losses FROM match_results GROUP BY PlayerID;\n            Explanation: Count the number of wins and losses for each player in 'match_results' table.\n            Similarity Score: 0.9301\n\nPrompt: Count the number of tickets sold for the ""Home Team"" in the ""tickets"" table.\n            SQL: SELECT COUNT(*) FROM tickets WHERE team = 'Home Team';\n            Explanation: This query counts the number of tickets sold for the ""Home Team"" by filtering the ""team"" column using the WHERE clause and then counting all records with the COUNT function.\n            Similarity Score: 0.9545\n\nPrompt: List all players and their total wins in the 'PlayerWins' table\n            SQL: SELECT PlayerID, COUNT(WinID) as TotalWins FROM PlayerWins GROUP BY PlayerID;\n            Explanation: This SQL query groups the PlayerWins table by PlayerID and calculates the count of WinID for each PlayerID to find the total number of wins for each player.\n            Similarity Score: 0.9569","SELECT COUNT(Trophies_Won) as Total_Trophies FROM RCB","9.293810367584229"
