"timestamp","model","status","user_input","retrieved_context","llm_suggestion","latency_ms"
"2025-04-23 19:36:03","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","/*\nFetch those data of employees \nwhose salary is greater than 15,000 and \nthey live in Pune but have DOB in January\n*/","Prompt: Find the names and positions of employees who earn more than the average salary?\n            SQL: SELECT name, position FROM employee_salaries WHERE salary > (SELECT avg_salary FROM avg_salary);\n            Explanation: This query first creates a view 'avg_salary' to store the average salary value. Then, it retrieves the names and positions of employees who earn more than the average salary by using a subquery to compare each employee's salary to the average salary stored in the 'avg_salary' view.\n            Similarity Score: 1.0362\n\nPrompt: Add a new row to the 'digital_divide_stats' table with the following data: 'Rural India', 'Limited internet access', '2022-01-01'\n            SQL: INSERT INTO digital_divide_stats (region, issue, last_update) VALUES ('Rural India', 'Limited internet access', '2022-01-01');\n            Explanation: This query inserts a new row into the 'digital_divide_stats' table with the given data.\n            Similarity Score: 1.0479\n\nPrompt: Find the average salary and job title for employees in the ""hr_data"" table\n            SQL: SELECT job_title, AVG(salary) as avg_salary FROM hr_data GROUP BY job_title;\n            Explanation: This query finds the average salary and job title for employees by grouping the data by job_title and calculating the average salary for each group.\n            Similarity Score: 1.0573\n\nPrompt: Get the names and salaries of all employees who earn more than the average salary\n            SQL: SELECT name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);\n            Explanation: This SQL query retrieves the names and salaries of all employees who earn more than the average salary by selecting the name and salary columns for all records where the salary is greater than the average salary.\n            Similarity Score: 1.0575\n\nPrompt: Find the transaction dates and the total transaction amount for transactions made by customers residing in India.\n            SQL: SELECT tx_date, SUM(amount) as total_transaction_amount FROM transactions_4 WHERE country = 'India' GROUP BY tx_date;\n            Explanation: The SQL query filters the transactions_4 table for transactions made by customers residing in India and groups by transaction date. It then calculates the sum of the transaction amount for each transaction date, returning the transaction dates and total transaction amount for transactions made by customers residing in India.\n            Similarity Score: 1.0591","SELECT * \nFROM employees \nWHERE salary > 15000 \nAND city = 'Pune' \nAND MONTH(date_of_birth) = 1;","5.904668092727661"
"2025-04-23 19:37:37","meta-llama/llama-4-scout-17b-16e-instruct","ACCEPTED","/*\nFetch those data of employees \nwhose salary is greater than 15,000 and \nthey live in Pune but have DOB in January\n*/","Prompt: Find the names and positions of employees who earn more than the average salary?\n            SQL: SELECT name, position FROM employee_salaries WHERE salary > (SELECT avg_salary FROM avg_salary);\n            Explanation: This query first creates a view 'avg_salary' to store the average salary value. Then, it retrieves the names and positions of employees who earn more than the average salary by using a subquery to compare each employee's salary to the average salary stored in the 'avg_salary' view.\n            Similarity Score: 1.0362\n\nPrompt: Add a new row to the 'digital_divide_stats' table with the following data: 'Rural India', 'Limited internet access', '2022-01-01'\n            SQL: INSERT INTO digital_divide_stats (region, issue, last_update) VALUES ('Rural India', 'Limited internet access', '2022-01-01');\n            Explanation: This query inserts a new row into the 'digital_divide_stats' table with the given data.\n            Similarity Score: 1.0479\n\nPrompt: What is the total data usage for each customer in January 2022?\n            SQL: SELECT customer_id, SUM(usage_amount) as total_data_usage FROM data_usage WHERE MONTH(usage_date) = 1 AND YEAR(usage_date) = 2022 GROUP BY customer_id;\n            Explanation: This SQL query calculates the total data usage for each customer in January 2022 by grouping the data_usage table by the customer_id column and then summing the usage_amount column for each group, while also filtering based on the usage_date column.\n            Similarity Score: 1.0557\n\nPrompt: Find the average salary and job title for employees in the ""hr_data"" table\n            SQL: SELECT job_title, AVG(salary) as avg_salary FROM hr_data GROUP BY job_title;\n            Explanation: This query finds the average salary and job title for employees by grouping the data by job_title and calculating the average salary for each group.\n            Similarity Score: 1.0573\n\nPrompt: Get the names and salaries of all employees who earn more than the average salary\n            SQL: SELECT name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);\n            Explanation: This SQL query retrieves the names and salaries of all employees who earn more than the average salary by selecting the name and salary columns for all records where the salary is greater than the average salary.\n            Similarity Score: 1.0575","SELECT * FROM employees \nWHERE salary > 15000 \nAND city = 'Pune' \nAND MONTH(date_of_birth) = 1;","7.973211288452148"
